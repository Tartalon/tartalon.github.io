(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var firstName = 'Vladymyr';
var lastName = 'Solodovnik';
var age = 35;
var str = 'Hellow my name is Vladymyr';
var value;
value = lastName.length;
value = firstName[3];
value = lastName[lastName.length - 1];
value = firstName.toUpperCase();
value = firstName.indexOf('m'); //Возвращает первую букву 'm'.

value = firstName.lastIndexOf('y'); //Возвращает последнюю букву 'y'.

value = str.indexOf('y', 10); //Начать поск с индекса 10.

value = str.indexOf('name');
value = str.includes('is'); //Возвращает булевое значение (есть или нету).

value = str.slice(0, 5); //Вырезаем с индекса '0' по '5' не включая последний.

value = str.slice(0, -5); //выризаем с начала и до конца минус 5 символов.

value = str.replace('Vladymyr', 'Vovka'); //Замена слова или буквы...

console.log(value); // Шаблонные строки
// ES5

var strTwo;
strTwo = 'Hello mi name is ' + firstName + ' ' + lastName;
strTwo = '<ul>' + '<li>First name: ' + firstName + '</li>' + '<li>Last name: ' + lastName + '</li>' + '<li>Age: ' + age + '</li>' + '</ul>'; // console.log(strTwo);
// ES6

strTwo = "\n  <ul>\n    <li>First name: ".concat(firstName, "</li>\n    <li>Last name: ").concat(lastName, "</li>\n    <li>Age: ").concat(age, "</li>\n    <li>Math.random: ").concat(Math.random(), "</li>\n  </ul>\n");
document.body.innerHTML = strTwo;

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
